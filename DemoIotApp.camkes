/**
 * Main CAmkES configuration file of the IoT demo application.
 *
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;
import <if_OS_Timer.camkes>;

import "components/Sensor/Sensor.camkes";
import "components/CloudConnector/CloudConnector.camkes";
import "components/LogServer/LogServer.camkes";
import "components/NwStack/network_stack.camkes";
import "components/ConfigServer/ConfigServer.camkes";
import "components/Ticker/Ticker.camkes";

#include "include/util/loop_defines.h"
#include "system_config.h"

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DECLARE(TimeServer)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DECLARE(StorageServer)

#include "RPI_SPI_Flash/RPI_SPI_Flash.camkes"
DECLARE_COMPONENT_RPI_SPI_FLASH_DRV(Flash)

#include "NIC_RPi/NIC_RPi.camkes"
DECLARE_COMPONENT_MAILBOX_HW(MAILBOX)
DECLARE_COMPONENT_USB_HW(USB)
DECLARE_COMPONENT_NIC_DRV(NIC, NIC_DRIVER_RINGBUFFER_SIZE)


assembly {
    composition {

        //----------------------------------------------------------------------
        // LogServer
        //----------------------------------------------------------------------
        component  LogServer        logServer;


        //----------------------------------------------------------------------
        // SensorTemp
        //----------------------------------------------------------------------
        component  SensorTemp       sensorTemp;

        connection seL4SharedData   cloudConnectorData_sensorTempData   (from sensorTemp.cloudConnectorDataPort,   to cloudConnector.sensorDataPort);
        connection seL4RPCCall      cloudConnector_sensorTemp           (from sensorTemp.cloudConnector_interface, to cloudConnector.cloudConnector_interface);

        connection seL4RPCCall      sensorTemp_configServer             (from sensorTemp.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData   sensorTemp_configServer_data        (from sensorTemp.cfg_dataport_buf,       to configServer.cfg_dataport_sensorTemp);

        connection seL4RPCCall      sensorTemp_logServer                (from sensorTemp.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData   sensorTemp_logServer_data           (from sensorTemp.logServer_dataport_buf, to logServer.dataport_buf_sensorTemp);


        //----------------------------------------------------------------------
        // CloudConnector
        //----------------------------------------------------------------------
        component  CloudConnector       cloudConnector;

        connection seL4Notification     NwAppInitDone                    (from nwStack.nwStack_event_ready,   to cloudConnector.event_network_stack_init_done);
        connection seL4RPCCall          cloudConnector_nwStack           (from cloudConnector.network_stack_rpc,    to nwStack.network_stack_rpc);

        connection seL4RPCCall          cloudConnector_configServer      (from cloudConnector.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData       cloudConnector_configServer_data (from cloudConnector.cfg_dataport_buf,       to configServer.cfg_dataport_cloudConnector);

        connection seL4RPCCall          cloudConnector_logServer         (from cloudConnector.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData       cloudConnector_logServer_data    (from cloudConnector.logServer_dataport_buf, to logServer.dataport_buf_cloudConnector);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource,
            cloudConnector.entropy_rpc,
            cloudConnector.entropy_port)

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4SharedData GEN_NAME(cloudConnector, nwStack)(from cloudConnector.GEN_ID(NwAppDataPort), to nwStack.GEN_ID(nwStack_port));
#include "include/util/loop.h"

        //----------------------------------------------------------------------
        // Ethernet Driver
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_NIC_DRV_HW(MAILBOX, mailbox, USB, usb, NIC, nwDriver)

        //----------------------------------------------------------------------
        // Ticker
        // It's a very pragmatic approach to create a 1 second tick for each
        // network stack. Actually, we don't need this, because the TimeServer
        // should provide two timers per client, one for timeouts and once for
        // the periodic tick.
        //----------------------------------------------------------------------
        component Ticker ticker;
        connection seL4NotificationNative nwStack_tick (from ticker.nwStack_event_tick, to nwStack.c_tick_or_data);

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                nwStack;

#define COMPONENT nwStack
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
        connection seL4Notification GEN_NAME(COMPONENT, _a)(from COMPONENT.GEN_ID(e_write), to COMPONENT.GEN_ID(c_write)); \
        connection seL4Notification GEN_NAME(COMPONENT, _b)(from COMPONENT.GEN_ID(e_read), to COMPONENT.GEN_ID(c_read));   \
        connection seL4Notification GEN_NAME(COMPONENT, _c)(from COMPONENT.GEN_ID(e_conn), to COMPONENT.GEN_ID(c_conn));
#include "include/util/loop.h"
#undef COMPONENT

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver.nic_event_hasData,     to nwStack.c_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack.nic_driver,             to nwDriver.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,           to nwStack.nic_port_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,         to nwStack.nic_port_to);

        connection seL4RPCCall            NwStack_configuration_server     (from nwStack.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         NwStack_config_data              (from nwStack.cfg_dataport_buf,       to configServer.cfg_dataport_nwStack);

        connection seL4RPCCall            NwStack_logServer                (from nwStack.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData         NwStack_logServer_data           (from nwStack.logServer_dataport_buf, to logServer.dataport_buf_nwStack);


        //----------------------------------------------------------------------
        // StorageServer
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_RPI_SPI_FLASH(
            Flash, flash)

        component StorageServer storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            flash.storage_rpc, flash.storage_port
        )
        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            configServer.storage_rpc, configServer.storage_dp
        )


        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            cloudConnector.timeServer_rpc,  cloudConnector.timeServer_notify,
            logServer.timeServer_rpc,       logServer.timeServer_notify,
            sensorTemp.timeServer_rpc,      sensorTemp.timeServer_notify,
            flash.timeServer_rpc,           flash.timeServer_notify,
            ticker.timeServer_rpc,          ticker.timeServer_notify,
            nwDriver.timeServer_rpc,        nwDriver.timeServer_notify,
            nwStack.timeServer_rpc,         nwStack.timeServer_notify
        )

        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component   ConfigServer     configServer;

        connection  seL4RPCCall      configServer_logServer            (from configServer.log_server_interface,   to logServer.log_server_interface);
        connection  seL4SharedData   configServer_logServer_data       (from configServer.logServer_dataport_buf, to logServer.dataport_buf_configServer);
    }
    configuration {
        /* client id's */
        configServer.log_server_interface_attributes =       CONFIGSERVER_LOGGER_ID;
        cloudConnector.log_server_interface_attributes =     CLOUDCONNECTOR_LOGGER_ID;
        sensorTemp.log_server_interface_attributes =         SENSOR_LOGGER_ID;
        nwStack.log_server_interface_attributes =            NWSTACK_LOGGER_ID;

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            CONFIGSERVER_STORAGE_OFFSET, CONFIGSERVER_STORAGE_SIZE
        )
        StorageServer_CLIENT_ASSIGN_BADGE(
            configServer.storage_rpc, CONFIGSERVER_STORAGE_ID
        )

        TimeServer_CLIENT_ASSIGN_BADGES(
            cloudConnector.timeServer_rpc,
            logServer.timeServer_rpc,
            sensorTemp.timeServer_rpc,
            flash.timeServer_rpc,
            ticker.timeServer_rpc,
            nwDriver.timeServer_rpc,
            nwStack.timeServer_rpc
        )

        /* assign an initial value to semaphore */
        cloudConnector.sem_value = 0;

        CONFIGURE_INSTANCE_RPI_SPI_FLASH(flash)

        CONFIGURE_INSTANCE_MAILBOX_HW(mailbox, 0x3F00B000, 0x1000)

        CONFIGURE_INSTANCE_USB_HW(usb, 0x3F980000, 0x1000, 73)

        CONFIGURE_INSTANCE_NIC_DRV(nwDriver, 4*40960)
    }
}

