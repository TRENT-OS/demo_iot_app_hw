/**
 * Main CAmkES configuration file of the IoT demo application.
 *
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_EntropySource.camkes>;
import <if_OS_Timer.camkes>;

import "components/PartitionManager/PartitionManager.camkes";
import "components/Sensor/Sensor.camkes";
import "components/CloudConnector/CloudConnector.camkes";
import "components/TimerClient/TimerClient.camkes";
import "components/LogServer/LogServer.camkes";
import "components/NwStack/network_stack.camkes";
import "components/ConfigServer/ConfigServer.camkes";

#include "system_config.h"

#include "UART/Uart.camkes"
DECLARE_COMPONENT_UART(UART)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver)

#define CHANMUX_COMPONENT_NAME  ChanMux
#define CHANMUX_UPPER_INTERFACES "components/ChanMux/ChanMux_upper_interface.camkes"
#include "ChanMux/ChanMux.camkes"

#include "TimeServer/camkes/TimeServer.camkes"
DECLARE_COMPONENT_TimeServer(TimeServer)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

assembly {
    composition {

        //----------------------------------------------------------------------
        // LogServer
        //----------------------------------------------------------------------
        component  LogServer        logServer;

        connection seL4RPCCall      logServer_partitionManager_inf      (from logServer.api_pm_component, to partitionManager.api_pm_component);
        connection seL4SharedData   logServer_partitionManager_data     (from logServer.pm_dataport_buf,  to partitionManager.pm_dataport_buf_logServer);


        //----------------------------------------------------------------------
        // PartitionManager
        //----------------------------------------------------------------------
        component   PartitionManager  partitionManager;

        connection  seL4RPCCall       partitionManger_chanMux      (from partitionManager.chanMux_rpc,  to chanMux.chanMux_rpc);
        connection  seL4SharedData    partitionManger_chanMux_data (from partitionManager.chanMux_port, to chanMux.pm_port);
        connection  seL4Notification  dataAvailable_chanMux        (from chanMux.pm_event_hasData,      to partitionManager.chanMux_event_hasData);


        //----------------------------------------------------------------------
        // SensorTemp
        //----------------------------------------------------------------------
        component  SensorTemp       sensorTemp;

        connection seL4SharedData   cloudConnectorData_sensorTempData   (from sensorTemp.cloudConnectorDataPort,   to cloudConnector.sensorDataPort);
        connection seL4RPCCall      cloudConnector_sensorTemp           (from sensorTemp.cloudConnector_interface, to cloudConnector.cloudConnector_interface);

        connection seL4RPCCall      sensorTemp_configServer             (from sensorTemp.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData   sensorTemp_configServer_data        (from sensorTemp.cfg_dataport_buf,       to configServer.cfg_dataport_sensorTemp);

        connection seL4RPCCall      sensorTemp_logServer                (from sensorTemp.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData   sensorTemp_logServer_data           (from sensorTemp.logServer_dataport_buf, to logServer.dataport_buf_sensorTemp);


        //----------------------------------------------------------------------
        // CloudConnector
        //----------------------------------------------------------------------
        component  CloudConnector       cloudConnector;

        connection seL4Notification     NwAppInitDone                    (from nwStack.event_network_init_done,   to cloudConnector.event_network_stack_init_done);
        connection seL4RPCCall          cloudConnector_nwStack           (from cloudConnector.network_stack_rpc,    to nwStack.network_stack_rpc);
        connection seL4SharedData       NwApp_dataConnection             (from cloudConnector.NwAppDataPort,        to nwStack.port_app_io);

        connection seL4RPCCall          cloudConnector_configServer      (from cloudConnector.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData       cloudConnector_configServer_data (from cloudConnector.cfg_dataport_buf,       to configServer.cfg_dataport_cloudConnector);

        connection seL4RPCCall          cloudConnector_logServer         (from cloudConnector.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData       cloudConnector_logServer_data    (from cloudConnector.logServer_dataport_buf, to logServer.dataport_buf_cloudConnector);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource,
            cloudConnector.entropySource_rpc,
            cloudConnector.entropySource_dp)

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver         nwDriver;

        connection seL4Notification NwDriver_Chanmux_dataAvail       (from chanMux.nic_event_hasData,        to nwDriver.chanMux_event_hasData);
        connection seL4RPCCall      nwDriver_chanmux                 (from nwDriver.chanMux_rpc,             to chanMux.chanMux_rpc);
        connection seL4SharedData   NwDriver_Chanmux_port_ctrl       (from nwDriver.chanMux_port_ctrl,       to chanMux.nic_port_ctrl);
        connection seL4SharedData   NwDriver_Chanmux_port_data_read  (from nwDriver.chanMux_port_data_read,  to chanMux.nic_port_data_read);
        connection seL4SharedData   NwDriver_Chanmux_port_data_write (from nwDriver.chanMux_port_data_write, to chanMux.nic_port_data_write);

        connection seL4RPCCall      NwDriver_logServer               (from nwDriver.logServer_rpc,  to logServer.log_server_interface);
        connection seL4SharedData   NwDriver_logServer_data          (from nwDriver.logServer_port, to logServer.dataport_buf_nwDriver);


        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                nwStack;

        connection seL4NotificationNative NwStackdataAvail2                (from nwStack.event_internal, to nwStack.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1                (from nwStack.e_write,        to nwStack.c_write);
        connection seL4Notification       NwStackEventsRxd2                (from nwStack.e_read,         to nwStack.c_read);
        connection seL4Notification       NwStackEventsRxd3                (from nwStack.e_conn,         to nwStack.c_conn);

        connection seL4RPCCall            nwStack_timerClient              (from nwStack.Timer,          to timerClient.TimerClient);

        connection seL4NotificationNative NwStackdataAvail3                (from timerClient.e_timeout_nwstacktick, to nwStack.event_tick_or_data);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver.nic_event_hasData,     to nwStack.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack.nic_driver,             to nwDriver.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,           to nwStack.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,         to nwStack.port_nic_to);

        connection seL4RPCCall            NwStack_configuration_server     (from nwStack.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         NwStack_config_data              (from nwStack.cfg_dataport_buf,       to configServer.cfg_dataport_nwStack);

        connection seL4RPCCall            NwStack_logServer                (from nwStack.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData         NwStack_logServer_data           (from nwStack.logServer_dataport_buf, to logServer.dataport_buf_nwStack);


        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_CHANMUX_TO_UART(ChanMux, chanMux, uartDrv)

        //----------------------------------------------------------------------
        // TimerClient
        //----------------------------------------------------------------------
        component  TimerClient timerClient;


        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_TimeServer(
            TimeServer,
            timeServer,
            timerClient.timeServer_rpc,
            cloudConnector.timeServer_rpc,
            logServer.timeServer_rpc,
            sensorTemp.timeServer_rpc)


        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component   ConfigServer     configServer;

        connection  seL4RPCCall      configServer_pm                   (from configServer.api_pm_component, to partitionManager.api_pm_component);
        connection  seL4SharedData   configServer_pm_data              (from configServer.pm_dataport_buf,  to partitionManager.pm_dataport_buf_configServer);

        connection  seL4RPCCall      configServer_logServer            (from configServer.log_server_interface,   to logServer.log_server_interface);
        connection  seL4SharedData   configServer_logServer_data       (from configServer.logServer_dataport_buf, to logServer.dataport_buf_configServer);


        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_UART(
            UART, uartDrv)
    }
    configuration {
        /* client id's */
        configServer.log_server_interface_attributes =       10;
        cloudConnector.log_server_interface_attributes =     20;
        sensorTemp.log_server_interface_attributes =         30;
        nwDriver.log_server_interface_attributes =           40;
        nwStack.log_server_interface_attributes =            50;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        nwDriver.chanMux_rpc_attributes         = CHANMUX_ID_NIC;
        partitionManager.chanMux_rpc_attributes = CHANMUX_ID_PM;

        CONFIGURE_INSTANCE_UART(
            uartDrv,
            CFG_CHANMUX_DEFAULT_UART_PHYS_ADDR,
            CFG_CHANMUX_DEFAULT_UART_INTR)

        /* assign an initial value to semaphore */
        cloudConnector.sem_value = 0;
    }
}

