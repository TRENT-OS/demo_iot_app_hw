/**
 * Main CAmkES configuration file of the IoT demo application.
 *
 * Copyright (C) 2020, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_EntropySource.camkes>;
import <if_OS_Timer.camkes>;

import "components/Sensor/Sensor.camkes";
import "components/CloudConnector/CloudConnector.camkes";
import "components/TimerClient/TimerClient.camkes";
import "components/LogServer/LogServer.camkes";
import "components/NwStack/network_stack.camkes";
import "components/ConfigServer/ConfigServer.camkes";

#include "system_config.h"

#include "NIC_Dummy/NIC_Dummy.camkes"
DECLARE_COMPONENT_NIC_Dummy(NwDriver)

#include "TimeServer/camkes/TimeServer.camkes"
DECLARE_COMPONENT_TimeServer(TimeServer)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

#include "StorageServer/camkes/StorageServer.camkes"
DECLARE_COMPONENT_StorageServer(StorageServer)

#include "RamDisk/RamDisk.camkes"
DECLARE_COMPONENT_RamDisk(RamDisk)

assembly {
    composition {

        //----------------------------------------------------------------------
        // LogServer
        //----------------------------------------------------------------------
        component  LogServer        logServer;


        //----------------------------------------------------------------------
        // SensorTemp
        //----------------------------------------------------------------------
        component  SensorTemp       sensorTemp;

        connection seL4SharedData   cloudConnectorData_sensorTempData   (from sensorTemp.cloudConnectorDataPort,   to cloudConnector.sensorDataPort);
        connection seL4RPCCall      cloudConnector_sensorTemp           (from sensorTemp.cloudConnector_interface, to cloudConnector.cloudConnector_interface);

        connection seL4RPCCall      sensorTemp_configServer             (from sensorTemp.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData   sensorTemp_configServer_data        (from sensorTemp.cfg_dataport_buf,       to configServer.cfg_dataport_sensorTemp);

        connection seL4RPCCall      sensorTemp_logServer                (from sensorTemp.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData   sensorTemp_logServer_data           (from sensorTemp.logServer_dataport_buf, to logServer.dataport_buf_sensorTemp);


        //----------------------------------------------------------------------
        // CloudConnector
        //----------------------------------------------------------------------
        component  CloudConnector       cloudConnector;

        connection seL4Notification     NwAppInitDone                    (from nwStack.event_network_init_done,   to cloudConnector.event_network_stack_init_done);
        connection seL4RPCCall          cloudConnector_nwStack           (from cloudConnector.network_stack_rpc,    to nwStack.network_stack_rpc);
        connection seL4SharedData       NwApp_dataConnection             (from cloudConnector.NwAppDataPort,        to nwStack.port_app_io);

        connection seL4RPCCall          cloudConnector_configServer      (from cloudConnector.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData       cloudConnector_configServer_data (from cloudConnector.cfg_dataport_buf,       to configServer.cfg_dataport_cloudConnector);

        connection seL4RPCCall          cloudConnector_logServer         (from cloudConnector.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData       cloudConnector_logServer_data    (from cloudConnector.logServer_dataport_buf, to logServer.dataport_buf_cloudConnector);

        DECLARE_AND_CONNECT_INSTANCE_EntropySource(
            EntropySource,
            entropySource,
            cloudConnector.entropySource_rpc,
            cloudConnector.entropySource_dp)

        //----------------------------------------------------------------------
        // Network Driver #1
        //----------------------------------------------------------------------
        component  NwDriver         nwDriver;

        connection seL4RPCCall      NwDriver_logServer               (from nwDriver.logServer_rpc,  to logServer.log_server_interface);
        connection seL4SharedData   NwDriver_logServer_data          (from nwDriver.logServer_port, to logServer.dataport_buf_nwDriver);


        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                nwStack;

        connection seL4NotificationNative NwStackdataAvail2                (from nwStack.event_internal, to nwStack.event_tick_or_data);
        connection seL4Notification       NwStackEventsRxd1                (from nwStack.e_write,        to nwStack.c_write);
        connection seL4Notification       NwStackEventsRxd2                (from nwStack.e_read,         to nwStack.c_read);
        connection seL4Notification       NwStackEventsRxd3                (from nwStack.e_conn,         to nwStack.c_conn);

        connection seL4RPCCall            nwStack_timerClient              (from nwStack.Timer,          to timerClient.TimerClient);

        connection seL4NotificationNative NwStackdataAvail3                (from timerClient.e_timeout_nwstacktick, to nwStack.event_tick_or_data);

        connection seL4NotificationNative NwStackdataAvail1                (from nwDriver.nic_event_hasData,     to nwStack.event_tick_or_data);
        connection seL4RPCCall            nwStack_NwDriver                 (from nwStack.nic_driver,             to nwDriver.nic_rpc);
        connection seL4SharedData         NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,           to nwStack.port_nic_from);
        connection seL4SharedData         NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,         to nwStack.port_nic_to);

        connection seL4RPCCall            NwStack_configuration_server     (from nwStack.OS_ConfigServiceServer, to configServer.OS_ConfigServiceServer);
        connection seL4SharedData         NwStack_config_data              (from nwStack.cfg_dataport_buf,       to configServer.cfg_dataport_nwStack);

        connection seL4RPCCall            NwStack_logServer                (from nwStack.log_server_interface,   to logServer.log_server_interface);
        connection seL4SharedData         NwStack_logServer_data           (from nwStack.logServer_dataport_buf, to logServer.dataport_buf_nwStack);


        //----------------------------------------------------------------------
        // TimerClient
        //----------------------------------------------------------------------
        component  TimerClient timerClient;


        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_TimeServer(
            TimeServer,
            timeServer,
            timerClient.timeServer_rpc,
            cloudConnector.timeServer_rpc,
            logServer.timeServer_rpc,
            sensorTemp.timeServer_rpc)


        //----------------------------------------------------------------------
        // ConfigServer
        //----------------------------------------------------------------------
        component   ConfigServer     configServer;

        connection  seL4RPCCall      configServer_logServer            (from configServer.log_server_interface,   to logServer.log_server_interface);
        connection  seL4SharedData   configServer_logServer_data       (from configServer.logServer_dataport_buf, to logServer.dataport_buf_configServer);


        //----------------------------------------------------------------------
        // StorageServer
        //----------------------------------------------------------------------
        component RamDisk   ramDisk;

        DECLARE_AND_CONNECT_INSTANCE_StorageServer(
            StorageServer, storageServer,
            ramDisk.storage_rpc, ramDisk.storage_port,
            configServer.storage_rpc, configServer.storage_dp,
            logServer.storage_rpc, logServer.storage_dp)
    }
    configuration {
        /* client id's */
        configServer.log_server_interface_attributes =       10;
        cloudConnector.log_server_interface_attributes =     20;
        sensorTemp.log_server_interface_attributes =         30;
        nwDriver.log_server_interface_attributes =           40;
        nwStack.log_server_interface_attributes =            50;

        /* assign an initial value to semaphore */
        cloudConnector.sem_value = 0;

        CONFIGURE_INSTANCE_StorageServer(
            storageServer,
            0, 1*1024*1024,
            1*1024*1024, 1*1024*1024)

        configServer.storage_rpc_attributes = 1;
        logServer.storage_rpc_attributes = 2;
    }
}

