/*
   *  Network Stack
   *
   *  Copyright (C) 2020, Hensoldt Cyber GmbH
*/


import <if_OS_Nic.camkes>;
import <if_OS_Socket.camkes>;
import <if_OS_Timer.camkes>;
import <if_OS_ConfigService.camkes>;
import <if_OS_Logger.camkes>;

#include "include/util/loop_defines.h"
#include "system_config.h"

component NwStack {

    control;

    emits      EventDataAvailable   e_tick_or_data;
    consumes   EventDataAvailable   c_tick_or_data; // event also from NIC and Timer

    has         mutex                   allocatorMutex;
    has         mutex                   nwstackMutex;

    has         mutex                   socketControlBlockMutex;
    has         mutex                   stackThreadSafeMutex;

#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT                       \
    GEN_ID(emits NwStack_WrEv e_write);    \
    GEN_ID(consumes NwStack_WrEv c_write); \
    GEN_ID(emits NwStack_RdEv e_read);     \
    GEN_ID(consumes NwStack_RdEv c_read);  \
    GEN_ID(emits NwStack_ConnEv e_conn);   \
    GEN_ID(consumes NwStack_ConnEv c_conn);
#include "include/util/loop.h"

    //-------------------------------------------------
    // interface TimeServer
    uses        if_OS_Timer           timeServer_rpc;

    //-------------------------------------------------
    // interface Ethernet NIC driver
    uses        if_OS_Nic               nic_driver;
    dataport    Buf                     nic_port_from; // NIC -> stack
    dataport    Buf                     nic_port_to;   // stack -> NIC

    //---------------------------------------------------
    // interface to ConfigurationServer
    uses     if_OS_ConfigService OS_ConfigServiceServer;
    dataport Buf                 cfg_dataport_buf;

    //-------------------------------------------------
    // interface to LogServer
    dataport    Buf                     logServer_dataport_buf;
    uses        if_OS_Logger            log_server_interface;

    //-------------------------------------------------
    // interface Application
    provides if_OS_Socket network_stack_rpc; // name hard-coded in network client lib
    emits EventServiceReady nwStack_event_ready;
#define LOOP_COUNT OS_NETWORK_MAXIMUM_SOCKET_NO
#define LOOP_ELEMENT \
    GEN_ID(dataport Buf nwStack_port);
#include "include/util/loop.h"

}
